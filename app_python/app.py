"""
Streamlit App for Model Visualization
·ª®ng d·ª•ng hi·ªÉn th·ªã tr·ª±c quan cho LORA Adapter v√† LightGBM models
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import json
from model_loader import load_models
import warnings
warnings.filterwarnings('ignore')

# Page configuration
st.set_page_config(
    page_title="B·∫£ng ƒêi·ªÅu Khi·ªÉn Tr·ª±c Quan AI Models",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS
st.markdown("""
<style>
.main-header {
    font-size: 2.5rem;
    font-weight: bold;
    color: #1f77b4;
    text-align: center;
    margin-bottom: 2rem;
}
.model-card {
    background-color: #f0f2f6;
    padding: 1rem;
    border-radius: 10px;
    margin: 1rem 0;
}
.metric-card {
    background-color: #ffffff;
    padding: 1rem;
    border-radius: 8px;
    border: 1px solid #ddd;
    margin: 0.5rem 0;
}
</style>
""", unsafe_allow_html=True)

@st.cache_data
def load_models_cached():
    """Cache loaded models to improve performance"""
    return load_models(".")

def render_adapter_info(loader):
    """Render LORA Adapter information"""
    st.markdown("### üß† M√¥ H√¨nh LORA Adapter")
    
    adapter_info = loader.get_adapter_summary()
    
    if "error" not in adapter_info:
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("#### C·∫•u H√¨nh M√¥ H√¨nh")
            st.markdown(f"**M√¥ H√¨nh G·ªëc:** {adapter_info.get('Base Model', 'N/A')}")
            st.markdown(f"**Lo·∫°i PEFT:** {adapter_info.get('PEFT Type', 'N/A')}")
            st.markdown(f"**Lo·∫°i T√°c V·ª•:** {adapter_info.get('Task Type', 'N/A')}")
            st.markdown(f"**Ch·∫ø ƒê·ªô Inference:** {'‚úÖ' if adapter_info.get('Inference Mode') else '‚ùå'}")
        
        with col2:
            st.markdown("#### Tham S·ªë LoRA")
            st.metric("Rank LoRA (r)", adapter_info.get('LoRA Rank (r)', 0))
            st.metric("Alpha LoRA", adapter_info.get('LoRA Alpha', 0))
            st.metric("Dropout LoRA", f"{adapter_info.get('LoRA Dropout', 0):.3f}")
        
        # Target Modules
        target_modules = adapter_info.get('Target Modules', [])
        if target_modules:
            st.markdown("#### Module M·ª•c Ti√™u")
            cols = st.columns(len(target_modules))
            for i, module in enumerate(target_modules):
                with cols[i % len(cols)]:
                    st.markdown(f"üì¶ `{module}`")
        
        # Advanced Features
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("DoRA", "‚úÖ" if adapter_info.get('Use DoRA') else "‚ùå")
        with col2:
            st.metric("QLoRA", "‚úÖ" if adapter_info.get('Use QLoRA') else "‚ùå")
        with col3:
            st.metric("RSLoRA", "‚úÖ" if adapter_info.get('Use RSLoRA', False) else "‚ùå")
    else:
        st.error("Kh√¥ng th·ªÉ t·∫£i c·∫•u h√¨nh LORA Adapter")

def render_lightgbm_info(loader):
    """Render LightGBM model information"""
    st.markdown("### üå≥ M√¥ H√¨nh LightGBM")
    
    lgb_info = loader.get_lightgbm_summary()
    
    if "error" not in lgb_info:
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("S·ªë C√¢y", lgb_info.get('Number of Trees', 0))
        with col2:
            st.metric("S·ªë ƒê·∫∑c Tr∆∞ng", lgb_info.get('Number of Features', 0))
        with col3:
            st.metric("S·ªë L·ªõp", lgb_info.get('Number of Classes', 1))
        with col4:
            st.metric("M·ª•c Ti√™u", lgb_info.get('Objective', 'Unknown'))
        
        # Feature Names
        feature_names = lgb_info.get('Feature Names', [])
        if feature_names:
            st.markdown("#### C√°c ƒê·∫∑c Tr∆∞ng C·ªßa M√¥ H√¨nh")
            feature_df = pd.DataFrame({
                'ƒê·∫∑c Tr∆∞ng': feature_names,
                'Ch·ªâ S·ªë': range(len(feature_names))
            })
            st.dataframe(feature_df, use_container_width=True)
    else:
        st.error("Kh√¥ng th·ªÉ t·∫£i m√¥ h√¨nh LightGBM")

def render_feature_importance(loader):
    """Render feature importance visualization"""
    st.markdown("### üìä Ph√¢n T√≠ch T·∫ßm Quan Tr·ªçng ƒê·∫∑c Tr∆∞ng")
    
    try:
        importance_df = loader.get_feature_importance()
        
        if not importance_df.empty:
            # Create feature importance chart
            fig = make_subplots(
                rows=1, cols=2,
                subplot_titles=('T·∫ßm Quan Tr·ªçng Theo Gain', 'T·∫ßm Quan Tr·ªçng Theo Split'),
                specs=[[{"secondary_y": False}, {"secondary_y": False}]]
            )
            
            # Gain importance
            fig.add_trace(
                go.Bar(
                    x=importance_df['importance_gain'],
                    y=importance_df['feature'],
                    orientation='h',
                    name='Gain',
                    marker_color='lightblue'
                ),
                row=1, col=1
            )
            
            # Split importance
            fig.add_trace(
                go.Bar(
                    x=importance_df['importance_split'],
                    y=importance_df['feature'],
                    orientation='h',
                    name='Split',
                    marker_color='lightcoral'
                ),
                row=1, col=2
            )
            
            fig.update_layout(
                height=600,
                title_text="So S√°nh T·∫ßm Quan Tr·ªçng ƒê·∫∑c Tr∆∞ng",
                showlegend=False
            )
            
            st.plotly_chart(fig, use_container_width=True)
            
            # Display top features
            col1, col2 = st.columns(2)
            with col1:
                st.markdown("#### Top ƒê·∫∑c Tr∆∞ng Theo Gain")
                st.dataframe(
                    importance_df[['feature', 'importance_gain']].head(10),
                    use_container_width=True
                )
            
            with col2:
                st.markdown("#### Top ƒê·∫∑c Tr∆∞ng Theo Split")
                st.dataframe(
                    importance_df[['feature', 'importance_split']].head(10),
                    use_container_width=True
                )
        else:
            st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu t·∫ßm quan tr·ªçng ƒë·∫∑c tr∆∞ng")
    except Exception as e:
        st.error(f"L·ªói khi t·∫°o bi·ªÉu ƒë·ªì t·∫ßm quan tr·ªçng: {e}")

def render_prediction_demo(loader):
    """Render prediction demo interface"""
    st.markdown("### üéØ Demo D·ª± ƒêo√°n R·ªßi Ro Vay V·ªën")
    st.markdown("**ƒêi·ªÅn th√¥ng tin d∆∞·ªõi ƒë√¢y ƒë·ªÉ d·ª± ƒëo√°n kh·∫£ nƒÉng v·ª° n·ª£ kho·∫£n vay**")
    st.markdown("---")
    
    if loader.lightgbm_model is None:
        st.error("M√¥ h√¨nh LightGBM ch∆∞a ƒë∆∞·ª£c t·∫£i")
        return
    
    # Input section without form first to make sure it shows
    st.markdown("#### üìù Nh·∫≠p Th√¥ng Tin Ng∆∞·ªùi Vay")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("##### Th√¥ng Tin C√° Nh√¢n")
        person_age = st.slider("üéÇ Tu·ªïi", 18, 80, 35, help="Tu·ªïi c·ªßa ng∆∞·ªùi vay")
        person_income = st.number_input(
            "üí∞ Thu Nh·∫≠p H√†ng NƒÉm (USD)", 
            min_value=10000, max_value=500000, value=75000, step=1000,
            help="Thu nh·∫≠p h√†ng nƒÉm c·ªßa ng∆∞·ªùi vay"
        )
        
        home_ownership = st.selectbox(
            "üè† T√¨nh Tr·∫°ng Nh√† ·ªû",
            options=[0, 1, 2],
            format_func=lambda x: {0: "Thu√™ nh√†", 1: "S·ªü h·ªØu", 2: "Th·∫ø ch·∫•p"}[x],
            help="T√¨nh tr·∫°ng s·ªü h·ªØu nh√† c·ªßa ng∆∞·ªùi vay"
        )
        
        emp_length = st.slider(
            "üíº Th·ªùi Gian L√†m Vi·ªác (nƒÉm)", 
            0, 20, 5,
            help="S·ªë nƒÉm kinh nghi·ªám l√†m vi·ªác"
        )
    
    with col2:
        st.markdown("##### Th√¥ng Tin Kho·∫£n Vay")
        loan_intent = st.selectbox(
            "üéØ M·ª•c ƒê√≠ch Vay",
            options=[0, 1, 2, 3, 4, 5],
            format_func=lambda x: {
                0: "C√° nh√¢n", 1: "Gi√°o d·ª•c", 2: "Y t·∫ø",
                3: "Kinh doanh", 4: "C·∫£i thi·ªán nh√†", 5: "Tr·∫£ n·ª£"
            }[x],
            help="M·ª•c ƒë√≠ch s·ª≠ d·ª•ng kho·∫£n vay"
        )
        
        loan_amount = st.number_input(
            "üíµ S·ªë Ti·ªÅn Vay (USD)", 
            min_value=1000, max_value=50000, value=10000, step=500,
            help="S·ªë ti·ªÅn mu·ªën vay"
        )
        
        default_on_file = st.selectbox(
            "‚ö†Ô∏è L·ªãch S·ª≠ V·ª° N·ª£",
            options=[0, 1],
            format_func=lambda x: {0: "Kh√¥ng", 1: "C√≥"}[x],
            help="ƒê√£ t·ª´ng v·ª° n·ª£ tr∆∞·ªõc ƒë√¢y hay ch∆∞a"
        )
        
        credit_hist_length = st.slider(
            "üìä Th·ªùi Gian C√≥ T√≠n D·ª•ng (nƒÉm)", 
            0, 25, 10,
            help="S·ªë nƒÉm c√≥ l·ªãch s·ª≠ t√≠n d·ª•ng"
        )
    
    # Big predict button
    st.markdown("---")
    st.markdown("#### üîÆ Th·ª±c Hi·ªán D·ª± ƒêo√°n")
    
    predict_button = st.button("ÔøΩ D·ª∞ ƒêO√ÅN R·ª¶I RO NGAY", type="primary", use_container_width=True)
    
    submitted = predict_button
    
    # Results section
    if submitted:
        st.markdown("---")
        st.markdown("#### üìä K·∫øt Qu·∫£ D·ª± ƒêo√°n")
        
        # Create input array
        input_data = np.array([[
            person_age, person_income, home_ownership, emp_length,
            loan_intent, loan_amount, default_on_file, credit_hist_length
        ]])
        
        try:
            with st.spinner("ƒêang ph√¢n t√≠ch..."):
                prediction = loader.predict_lightgbm(input_data)[0]
                # Model ƒë√£ tr·∫£ v·ªÅ probability tr·ª±c ti·∫øp, kh√¥ng c·∫ßn sigmoid
                probability = prediction
                
                # Display result in columns
                col1, col2 = st.columns([1, 1])
                
                with col1:
                    # Risk level determination
                    if probability > 0.7:
                        risk_level = "R·ª¶I RO CAO"
                        risk_color = "red"
                        risk_emoji = "üî¥"
                    elif probability > 0.4:
                        risk_level = "R·ª¶I RO TRUNG B√åNH"
                        risk_color = "orange"
                        risk_emoji = "üü°"
                    else:
                        risk_level = "R·ª¶I RO TH·∫§P"
                        risk_color = "green"
                        risk_emoji = "üü¢"
                    
                    st.markdown(f"**X√°c Su·∫•t V·ª° N·ª£:** {probability:.1%}")
                    st.markdown(f"**M·ª©c ƒê·ªô R·ªßi Ro:** {risk_emoji} <span style='color: {risk_color}; font-weight: bold; font-size: 1.2em;'>{risk_level}</span>", unsafe_allow_html=True)
                    
                    # Recommendation
                    if probability > 0.6:
                        st.error("‚ùå **Khuy·∫øn ngh·ªã:** KH√îNG n√™n ph√™ duy·ªát kho·∫£n vay")
                    elif probability > 0.3:
                        st.warning("‚ö†Ô∏è **Khuy·∫øn ngh·ªã:** C·∫ßn xem x√©t k·ªπ th√™m")
                    else:
                        st.success("‚úÖ **Khuy·∫øn ngh·ªã:** C√≥ th·ªÉ ph√™ duy·ªát kho·∫£n vay")
                
                with col2:
                    # Probability gauge
                    fig = go.Figure(go.Indicator(
                        mode = "gauge+number+delta",
                        value = probability * 100,
                        domain = {'x': [0, 1], 'y': [0, 1]},
                        title = {'text': "X√°c Su·∫•t V·ª° N·ª£ (%)"},
                        delta = {'reference': 50},
                        gauge = {
                            'axis': {'range': [None, 100]},
                            'bar': {'color': "darkblue"},
                            'steps': [
                                {'range': [0, 30], 'color': "lightgreen"},
                                {'range': [30, 60], 'color': "yellow"},
                                {'range': [60, 100], 'color': "lightcoral"}
                            ],
                            'threshold': {
                                'line': {'color': "red", 'width': 4},
                                'thickness': 0.75,
                                'value': 50
                            }
                        }
                    ))
                    
                    fig.update_layout(height=300, margin=dict(l=20, r=20, t=40, b=20))
                    st.plotly_chart(fig, use_container_width=True)
                
                # Detailed analysis
                st.markdown("#### üìà Ph√¢n T√≠ch Chi Ti·∫øt")
                analysis_col1, analysis_col2 = st.columns(2)
                
                with analysis_col1:
                    st.markdown("**Th√¥ng Tin ƒê·∫ßu V√†o:**")
                    st.write(f"‚Ä¢ Tu·ªïi: {person_age}")
                    st.write(f"‚Ä¢ Thu nh·∫≠p: ${person_income:,}")
                    st.write(f"‚Ä¢ S·ªë ti·ªÅn vay: ${loan_amount:,}")
                    st.write(f"‚Ä¢ T·ª∑ l·ªá vay/thu nh·∫≠p: {(loan_amount/person_income)*100:.1f}%")
                
                with analysis_col2:
                    st.markdown("**Y·∫øu T·ªë R·ªßi Ro:**")
                    if loan_amount/person_income > 0.3:
                        st.write("‚ö†Ô∏è T·ª∑ l·ªá vay/thu nh·∫≠p cao")
                    if default_on_file == 1:
                        st.write("üî¥ C√≥ l·ªãch s·ª≠ v·ª° n·ª£")
                    if person_age < 25:
                        st.write("‚ö†Ô∏è Tu·ªïi c√≤n tr·∫ª (√≠t kinh nghi·ªám)")
                    if emp_length < 2:
                        st.write("‚ö†Ô∏è Th·ªùi gian l√†m vi·ªác ng·∫Øn")
                    if credit_hist_length < 3:
                        st.write("‚ö†Ô∏è L·ªãch s·ª≠ t√≠n d·ª•ng ng·∫Øn")
                
        except Exception as e:
            st.error(f"L·ªói khi th·ª±c hi·ªán d·ª± ƒëo√°n: {e}")
    
    # Add some example cases
    st.markdown("---")
    st.markdown("#### üí° Th·ª≠ C√°c V√≠ D·ª• M·∫´u")
    st.markdown("*Nh·∫•n v√†o m·ªôt trong c√°c n√∫t d∆∞·ªõi ƒë·ªÉ t·ª± ƒë·ªông ƒëi·ªÅn th√¥ng tin m·∫´u*")
    
    example_col1, example_col2, example_col3 = st.columns(3)
    
    with example_col1:
        if st.button("üëç H·ªì S∆° T·ªët - R·ª¶I RO TH·∫§P", use_container_width=True, type="secondary"):
            st.success("ƒê√£ ƒëi·ªÅn th√¥ng tin h·ªì s∆° t·ªët! K√©o l√™n tr√™n ƒë·ªÉ xem v√† nh·∫•n n√∫t D·ª± ƒêo√°n.")
    
    with example_col2:
        if st.button("‚ö†Ô∏è H·ªì S∆° Trung B√¨nh", use_container_width=True, type="secondary"):
            st.warning("ƒê√£ ƒëi·ªÅn th√¥ng tin h·ªì s∆° trung b√¨nh! K√©o l√™n tr√™n ƒë·ªÉ xem v√† nh·∫•n n√∫t D·ª± ƒêo√°n.")
    
    with example_col3:
        if st.button("‚ùå H·ªì S∆° R·ªßi Ro - R·ª¶I RO CAO", use_container_width=True, type="secondary"):
            st.error("ƒê√£ ƒëi·ªÅn th√¥ng tin h·ªì s∆° r·ªßi ro cao! K√©o l√™n tr√™n ƒë·ªÉ xem v√† nh·∫•n n√∫t D·ª± ƒêo√°n.")
    
    # Instructions
    st.markdown("---")
    st.markdown("### üìã H∆∞·ªõng D·∫´n S·ª≠ D·ª•ng")
    st.markdown("""
    1. **ƒêi·ªÅu ch·ªânh c√°c thanh tr∆∞·ª£t v√† dropdown** ·ªü ph√≠a tr√™n
    2. **Nh·∫≠p s·ªë li·ªáu** v√†o c√°c √¥ s·ªë (thu nh·∫≠p, s·ªë ti·ªÅn vay)
    3. **Nh·∫•n n√∫t "üöÄ D·ª∞ ƒêO√ÅN R·ª¶I RO NGAY"** ƒë·ªÉ xem k·∫øt qu·∫£
    4. **Ho·∫∑c th·ª≠ c√°c v√≠ d·ª• m·∫´u** b·∫±ng c√°ch nh·∫•n c√°c n√∫t ·ªü tr√™n
    """)
    
    if not submitted:
        st.info("üëÜ H√£y ƒëi·ªÅu ch·ªânh c√°c th√¥ng tin ·ªü tr√™n v√† nh·∫•n n√∫t D·ª± ƒêo√°n ƒë·ªÉ xem k·∫øt qu·∫£!")

def main():
    """Main application function"""
    st.markdown("<h1 class='main-header'>ü§ñ B·∫£ng ƒêi·ªÅu Khi·ªÉn Tr·ª±c Quan AI Models</h1>", unsafe_allow_html=True)
    st.markdown("---")
    
    # Load models
    with st.spinner("ƒêang t·∫£i models..."):
        loader = load_models_cached()
    
    # Sidebar navigation
    st.sidebar.title("üß≠ ƒêi·ªÅu H∆∞·ªõng")
    page = st.sidebar.selectbox(
        "Ch·ªçn m·ªôt m·ª•c:",
        ["üìã T·ªïng Quan", "üß† LORA Adapter", "üå≥ M√¥ H√¨nh LightGBM", "üìä Ph√¢n T√≠ch ƒê·∫∑c Tr∆∞ng", "üéØ Demo D·ª± ƒêo√°n"]
    )
    
    if page == "üìã T·ªïng Quan":
        st.markdown("## üìã T·ªïng Quan V·ªÅ Models")
        st.markdown("""
        B·∫£ng ƒëi·ªÅu khi·ªÉn n√†y cung c·∫•p c√°c tr·ª±c quan h√≥a v√† ph√¢n t√≠ch to√†n di·ªán cho hai m√¥ h√¨nh AI:
        
        1. **üß† LORA Adapter Model**: M√¥ h√¨nh Parameter-Efficient Fine-Tuning (PEFT) d·ª±a tr√™n Low-Rank Adaptation
        2. **üå≥ LightGBM Model**: Framework gradient boosting ƒë∆∞·ª£c t·ªëi ∆∞u h√≥a cho ph√¢n lo·∫°i nh·ªã ph√¢n
        
        S·ª≠ d·ª•ng thanh ƒëi·ªÅu h∆∞·ªõng b√™n tr√°i ƒë·ªÉ kh√°m ph√° c√°c kh√≠a c·∫°nh kh√°c nhau c·ªßa nh·ªØng m√¥ h√¨nh n√†y.
        """)
        
        # Quick stats
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("### üß† LORA Adapter")
            adapter_info = loader.get_adapter_summary()
            if "error" not in adapter_info:
                st.success("‚úÖ M√¥ h√¨nh ƒë√£ t·∫£i th√†nh c√¥ng")
                st.info(f"M√¥ H√¨nh G·ªëc: {adapter_info.get('Base Model', 'N/A')}")
                st.info(f"Lo·∫°i T√°c V·ª•: {adapter_info.get('Task Type', 'N/A')}")
            else:
                st.error("‚ùå Kh√¥ng th·ªÉ t·∫£i m√¥ h√¨nh")
        
        with col2:
            st.markdown("### üå≥ LightGBM Model")
            lgb_info = loader.get_lightgbm_summary()
            if "error" not in lgb_info:
                st.success("‚úÖ M√¥ h√¨nh ƒë√£ t·∫£i th√†nh c√¥ng")
                st.info(f"S·ªë C√¢y: {lgb_info.get('Number of Trees', 0)}")
                st.info(f"S·ªë ƒê·∫∑c Tr∆∞ng: {lgb_info.get('Number of Features', 0)}")
            else:
                st.error("‚ùå Kh√¥ng th·ªÉ t·∫£i m√¥ h√¨nh")
    
    elif page == "üß† LORA Adapter":
        render_adapter_info(loader)
    
    elif page == "üå≥ M√¥ H√¨nh LightGBM":
        render_lightgbm_info(loader)
    
    elif page == "üìä Ph√¢n T√≠ch ƒê·∫∑c Tr∆∞ng":
        render_feature_importance(loader)
    
    elif page == "üéØ Demo D·ª± ƒêo√°n":
        render_prediction_demo(loader)
    
    # Footer
    st.markdown("---")
    st.markdown("üí° **M·∫πo**: S·ª≠ d·ª•ng thanh b√™n ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng gi·ªØa c√°c c√¥ng c·ª• tr·ª±c quan h√≥a v√† ph√¢n t√≠ch m√¥ h√¨nh kh√°c nhau.")

if __name__ == "__main__":
    main()