"""
Batch Prediction Module
X·ª≠ l√Ω d·ª± ƒëo√°n h√†ng lo·∫°t t·ª´ file CSV
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import io
from datetime import datetime
import time

def validate_csv_columns(df):
    """Ki·ªÉm tra v√† validate c√°c c·ªôt c·∫ßn thi·∫øt trong CSV"""
    required_columns = [
        'person_age', 'person_income', 'person_home_ownership', 
        'person_emp_length', 'loan_intent', 'loan_amnt', 
        'cb_person_default_on_file', 'cb_person_cred_hist_length'
    ]
    
    missing_columns = []
    for col in required_columns:
        if col not in df.columns:
            missing_columns.append(col)
    
    return missing_columns

def create_sample_csv():
    """T·∫°o file CSV m·∫´u ƒë·ªÉ download"""
    sample_data = {
        'person_age': [25, 35, 45, 30, 50],
        'person_income': [45000, 65000, 85000, 55000, 75000],
        'person_home_ownership': [0, 1, 1, 2, 1],  # 0: RENT, 1: OWN, 2: MORTGAGE
        'person_emp_length': [2, 8, 15, 5, 12],
        'loan_intent': [0, 1, 2, 3, 4],  # Different purposes
        'loan_amnt': [10000, 15000, 25000, 12000, 20000],
        'cb_person_default_on_file': [0, 0, 0, 1, 0],  # 0: No, 1: Yes
        'cb_person_cred_hist_length': [3, 10, 18, 7, 15]
    }
    
    df = pd.DataFrame(sample_data)
    return df

def process_batch_predictions(df, loader):
    """X·ª≠ l√Ω d·ª± ƒëo√°n h√†ng lo·∫°t"""
    results = []
    
    # Create progress bar
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    total_rows = len(df)
    
    for idx, row in df.iterrows():
        # Update progress
        progress = (idx + 1) / total_rows
        progress_bar.progress(progress)
        status_text.text(f'ƒêang x·ª≠ l√Ω h·ªì s∆° {idx + 1}/{total_rows}...')
        
        # Create input array
        input_data = np.array([[
            row['person_age'], row['person_income'], row['person_home_ownership'],
            row['person_emp_length'], row['loan_intent'], row['loan_amnt'],
            row['cb_person_default_on_file'], row['cb_person_cred_hist_length']
        ]])
        
        try:
            # Get prediction
            prediction = loader.predict_lightgbm(input_data)[0]
            approval_probability = prediction
            default_probability = 1 - approval_probability
            
            # Determine decision
            if default_probability > 0.7:
                decision = "T·ª™ CH·ªêI"
                risk_level = "R·ª¶I RO CAO"
            elif default_probability > 0.4:
                decision = "C√ÇN NH·∫ÆC"
                risk_level = "R·ª¶I RO TRUNG B√åNH"
            else:
                decision = "CH·∫§P THU·∫¨N"
                risk_level = "R·ª¶I RO TH·∫§P"
            
            # Calculate SHAP if available
            shap_summary = "N/A"
            if hasattr(loader, 'shap_explainer') and loader.shap_explainer:
                try:
                    shap_result = loader.calculate_shap_for_sample(input_data[0])
                    # Get top positive and negative factors
                    features_in_vietnamese = {
                        'person_age': 'Tu·ªïi',
                        'person_income': 'Thu nh·∫≠p',
                        'person_home_ownership': 'T√¨nh tr·∫°ng nh√†',
                        'person_emp_length': 'Th·ªùi gian l√†m vi·ªác',
                        'loan_intent': 'M·ª•c ƒë√≠ch vay',
                        'loan_amnt': 'S·ªë ti·ªÅn vay',
                        'cb_person_default_on_file': 'L·ªãch s·ª≠ n·ª£ x·∫•u',
                        'cb_person_cred_hist_length': 'L·ªãch s·ª≠ t√≠n d·ª•ng'
                    }
                    
                    # Find most important factors
                    shap_values = shap_result['shap_values']
                    sorted_features = sorted(shap_values.items(), key=lambda x: abs(x[1]), reverse=True)
                    top_factor = sorted_features[0] if sorted_features else None
                    
                    if top_factor:
                        feature_viet = features_in_vietnamese.get(top_factor[0], top_factor[0])
                        impact = "+" if top_factor[1] > 0 else "-"
                        shap_summary = f"{feature_viet} ({impact})"
                    
                except Exception:
                    shap_summary = "Error"
            
            result = {
                'STT': idx + 1,
                'Tu·ªïi': row['person_age'],
                'Thu nh·∫≠p': f"${row['person_income']:,}",
                'S·ªë ti·ªÅn vay': f"${row['loan_amnt']:,}",
                'T·ª∑ l·ªá duy·ªát': f"{approval_probability:.1%}",
                'X√°c su·∫•t v·ª° n·ª£': f"{default_probability:.1%}",
                'Quy·∫øt ƒë·ªãnh': decision,
                'M·ª©c r·ªßi ro': risk_level,
                'Y·∫øu t·ªë ch√≠nh': shap_summary
            }
            
            results.append(result)
            
        except Exception as e:
            # Handle error cases
            result = {
                'STT': idx + 1,
                'Tu·ªïi': row['person_age'],
                'Thu nh·∫≠p': f"${row['person_income']:,}",
                'S·ªë ti·ªÅn vay': f"${row['loan_amnt']:,}",
                'T·ª∑ l·ªá duy·ªát': "Error",
                'X√°c su·∫•t v·ª° n·ª£': "Error",
                'Quy·∫øt ƒë·ªãnh': "L·ªñI",
                'M·ª©c r·ªßi ro': "L·ªñI",
                'Y·∫øu t·ªë ch√≠nh': str(e)[:50]
            }
            results.append(result)
        
        # Small delay to show progress
        time.sleep(0.1)
    
    # Complete progress
    progress_bar.progress(1.0)
    status_text.text('‚úÖ Ho√†n th√†nh!')
    
    return pd.DataFrame(results)

def create_batch_visualizations(results_df):
    """T·∫°o c√°c bi·ªÉu ƒë·ªì cho k·∫øt qu·∫£ batch prediction"""
    
    # 1. Decision Distribution Pie Chart
    st.markdown("#### üìä Ph√¢n B·ªï Quy·∫øt ƒê·ªãnh")
    decision_counts = results_df['Quy·∫øt ƒë·ªãnh'].value_counts()
    
    fig_pie = go.Figure(data=[go.Pie(
        labels=decision_counts.index,
        values=decision_counts.values,
        hole=0.4,
        marker_colors=['#4CAF50', '#FF9800', '#F44336', '#9E9E9E']
    )])
    
    fig_pie.update_layout(
        title="T·ª∑ L·ªá C√°c Quy·∫øt ƒê·ªãnh Cho Vay",
        height=400
    )
    
    st.plotly_chart(fig_pie, use_container_width=True)
    
    # 2. Risk Level Distribution
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### üéØ Ph√¢n B·ªï M·ª©c R·ªßi Ro")
        risk_counts = results_df['M·ª©c r·ªßi ro'].value_counts()
        
        fig_risk = go.Figure(data=[go.Bar(
            x=risk_counts.index,
            y=risk_counts.values,
            marker_color=['#4CAF50', '#FF9800', '#F44336', '#9E9E9E']
        )])
        
        fig_risk.update_layout(
            title="S·ªë L∆∞·ª£ng Theo M·ª©c R·ªßi Ro",
            xaxis_title="M·ª©c R·ªßi Ro",
            yaxis_title="S·ªë L∆∞·ª£ng",
            height=400
        )
        
        st.plotly_chart(fig_risk, use_container_width=True)
    
    with col2:
        # 3. Approval Rate by Age Group
        st.markdown("#### üë• T·ª∑ L·ªá Duy·ªát Theo ƒê·ªô Tu·ªïi")
        
        # Convert approval rate back to numeric for analysis
        numeric_results = results_df.copy()
        numeric_results['Approval_Rate'] = numeric_results['T·ª∑ l·ªá duy·ªát'].str.replace('%', '').str.replace('Error', '0').astype(float) / 100
        numeric_results['Age_Group'] = pd.cut(numeric_results['Tu·ªïi'], 
                                            bins=[0, 25, 35, 50, 100], 
                                            labels=['18-25', '26-35', '36-50', '50+'])
        
        age_approval = numeric_results.groupby('Age_Group')['Approval_Rate'].mean()
        
        fig_age = go.Figure(data=[go.Bar(
            x=age_approval.index.astype(str),
            y=age_approval.values * 100,
            marker_color='#2196F3'
        )])
        
        fig_age.update_layout(
            title="T·ª∑ L·ªá Duy·ªát Trung B√¨nh (%)",
            xaxis_title="Nh√≥m Tu·ªïi",
            yaxis_title="T·ª∑ L·ªá Duy·ªát (%)",
            height=400
        )
        
        st.plotly_chart(fig_age, use_container_width=True)

def create_excel_report(results_df, original_df):
    """T·∫°o file Excel b√°o c√°o chi ti·∫øt"""
    output = io.BytesIO()
    
    # Create Excel writer
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        # Results sheet
        results_df.to_excel(writer, sheet_name='K·∫øt Qu·∫£ D·ª± ƒêo√°n', index=False)
        
        # Original data sheet
        original_df.to_excel(writer, sheet_name='D·ªØ Li·ªáu G·ªëc', index=False)
        
        # Summary sheet
        summary_data = {
            'Th·ªëng K√™': [
                'T·ªïng s·ªë h·ªì s∆°',
                'S·ªë h·ªì s∆° ƒë∆∞·ª£c ch·∫•p thu·∫≠n',
                'S·ªë h·ªì s∆° b·ªã t·ª´ ch·ªëi', 
                'S·ªë h·ªì s∆° c·∫ßn c√¢n nh·∫Øc',
                'T·ª∑ l·ªá ch·∫•p thu·∫≠n trung b√¨nh',
                'T·ª∑ l·ªá r·ªßi ro cao'
            ],
            'Gi√° Tr·ªã': [
                len(results_df),
                len(results_df[results_df['Quy·∫øt ƒë·ªãnh'] == 'CH·∫§P THU·∫¨N']),
                len(results_df[results_df['Quy·∫øt ƒë·ªãnh'] == 'T·ª™ CH·ªêI']),
                len(results_df[results_df['Quy·∫øt ƒë·ªãnh'] == 'C√ÇN NH·∫ÆC']),
                f"{(len(results_df[results_df['Quy·∫øt ƒë·ªãnh'] == 'CH·∫§P THU·∫¨N']) / len(results_df) * 100):.1f}%",
                f"{(len(results_df[results_df['M·ª©c r·ªßi ro'] == 'R·ª¶I RO CAO']) / len(results_df) * 100):.1f}%"
            ]
        }
        
        summary_df = pd.DataFrame(summary_data)
        summary_df.to_excel(writer, sheet_name='T·ªïng K·∫øt', index=False)
    
    output.seek(0)
    return output

def render_batch_prediction_page(loader):
    """Render trang d·ª± ƒëo√°n h√†ng lo·∫°t"""
    st.markdown("# üìä D·ª± ƒêo√°n H√†ng Lo·∫°t T·ª´ File CSV")
    st.markdown("### Upload file CSV ƒë·ªÉ d·ª± ƒëo√°n r·ªßi ro cho nhi·ªÅu h·ªì s∆° c√πng l√∫c")
    
    if loader.lightgbm_model is None:
        st.error("‚ùå Kh√¥ng th·ªÉ t·∫£i m√¥ h√¨nh LightGBM")
        return
    
    # Create tabs
    tab1, tab2, tab3 = st.tabs(["üìÅ Upload CSV", "üìã H∆∞·ªõng D·∫´n", "üì• File M·∫´u"])
    
    with tab3:
        st.markdown("### üì• T·∫£i File CSV M·∫´u")
        st.markdown("S·ª≠ d·ª•ng file m·∫´u n√†y ƒë·ªÉ hi·ªÉu ƒë·ªãnh d·∫°ng d·ªØ li·ªáu c·∫ßn thi·∫øt:")
        
        sample_df = create_sample_csv()
        st.dataframe(sample_df, use_container_width=True)
        
        # Create download button for sample
        csv_sample = sample_df.to_csv(index=False)
        st.download_button(
            label="‚¨áÔ∏è T·∫£i File M·∫´u (CSV)",
            data=csv_sample,
            file_name=f"loan_sample_{datetime.now().strftime('%Y%m%d')}.csv",
            mime="text/csv"
        )
        
        st.markdown("#### üìù Gi·∫£i Th√≠ch C√°c C·ªôt:")
        st.markdown("""
        - **person_age**: Tu·ªïi (18-80)
        - **person_income**: Thu nh·∫≠p h√†ng nƒÉm (USD)
        - **person_home_ownership**: T√¨nh tr·∫°ng nh√† (0=Thu√™, 1=S·ªü h·ªØu, 2=Th·∫ø ch·∫•p)
        - **person_emp_length**: S·ªë nƒÉm l√†m vi·ªác (0-20)
        - **loan_intent**: M·ª•c ƒë√≠ch vay (0=C√° nh√¢n, 1=Gi√°o d·ª•c, 2=Y t·∫ø, 3=Kinh doanh, 4=C·∫£i thi·ªán nh√†, 5=Tr·∫£ n·ª£)
        - **loan_amnt**: S·ªë ti·ªÅn vay (USD)
        - **cb_person_default_on_file**: L·ªãch s·ª≠ v·ª° n·ª£ (0=Kh√¥ng, 1=C√≥)
        - **cb_person_cred_hist_length**: S·ªë nƒÉm c√≥ l·ªãch s·ª≠ t√≠n d·ª•ng
        """)
    
    with tab2:
        st.markdown("### üìã H∆∞·ªõng D·∫´n S·ª≠ D·ª•ng")
        st.markdown("""
        #### üî¢ B∆∞·ªõc 1: Chu·∫©n B·ªã File CSV
        - File CSV ph·∫£i c√≥ ƒë√∫ng 8 c·ªôt theo th·ª© t·ª± tr√™n
        - Kh√¥ng ƒë∆∞·ª£c c√≥ d√≤ng header ti·∫øng Vi·ªát (s·ª≠ d·ª•ng t√™n c·ªôt ti·∫øng Anh)
        - D·ªØ li·ªáu ph·∫£i ·ªü ƒë·ªãnh d·∫°ng s·ªë
        
        #### üì§ B∆∞·ªõc 2: Upload File
        - Click v√†o v√πng upload ho·∫∑c k√©o th·∫£ file
        - H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông ki·ªÉm tra ƒë·ªãnh d·∫°ng
        
        #### ‚ö° B∆∞·ªõc 3: X·ª≠ L√Ω T·ª± ƒê·ªông
        - H·ªá th·ªëng s·∫Ω d·ª± ƒëo√°n t·ª´ng h·ªì s∆°
        - Hi·ªÉn th·ªã thanh ti·∫øn tr√¨nh
        
        #### üìä B∆∞·ªõc 4: Xem K·∫øt Qu·∫£
        - B·∫£ng k·∫øt qu·∫£ chi ti·∫øt
        - Bi·ªÉu ƒë·ªì ph√¢n t√≠ch
        - T·∫£i b√°o c√°o Excel
        """)
    
    with tab1:
        st.markdown("### üìÅ Upload File CSV")
        
        uploaded_file = st.file_uploader(
            "Ch·ªçn file CSV ch·ª©a d·ªØ li·ªáu h·ªì s∆° vay:",
            type=['csv'],
            help="File CSV ph·∫£i ch·ª©a ƒë√∫ng 8 c·ªôt theo ƒë·ªãnh d·∫°ng m·∫´u"
        )
        
        if uploaded_file is not None:
            try:
                # Read CSV
                df = pd.read_csv(uploaded_file)
                
                st.success(f"‚úÖ ƒê√£ t·∫£i file th√†nh c√¥ng! T√¨m th·∫•y {len(df)} h·ªì s∆°.")
                
                # Validate columns
                missing_cols = validate_csv_columns(df)
                
                if missing_cols:
                    st.error(f"‚ùå File CSV thi·∫øu c√°c c·ªôt sau: {', '.join(missing_cols)}")
                    st.info("üí° Vui l√≤ng t·∫£i file m·∫´u v√† ƒëi·ªÅu ch·ªânh d·ªØ li·ªáu theo ƒë√∫ng ƒë·ªãnh d·∫°ng.")
                    return
                
                # Show preview
                st.markdown("#### üëÄ Xem Tr∆∞·ªõc D·ªØ Li·ªáu")
                st.dataframe(df.head(10), use_container_width=True)
                
                # Process predictions button
                if st.button("üöÄ B·∫ÆT ƒê·∫¶U D·ª∞ ƒêO√ÅN H√ÄNG LO·∫†T", type="primary", use_container_width=True):
                    st.markdown("---")
                    st.markdown("### ‚ö° ƒêang X·ª≠ L√Ω D·ª± ƒêo√°n...")
                    
                    # Process predictions
                    results_df = process_batch_predictions(df, loader)
                    
                    # Show results
                    st.markdown("---")
                    st.markdown("### üéØ K·∫øt Qu·∫£ D·ª± ƒêo√°n H√†ng Lo·∫°t")
                    
                    # Summary metrics
                    col1, col2, col3, col4 = st.columns(4)
                    
                    total_count = len(results_df)
                    approved_count = len(results_df[results_df['Quy·∫øt ƒë·ªãnh'] == 'CH·∫§P THU·∫¨N'])
                    rejected_count = len(results_df[results_df['Quy·∫øt ƒë·ªãnh'] == 'T·ª™ CH·ªêI'])
                    review_count = len(results_df[results_df['Quy·∫øt ƒë·ªãnh'] == 'C√ÇN NH·∫ÆC'])
                    
                    with col1:
                        st.metric("üìä T·ªïng H·ªì S∆°", total_count)
                    
                    with col2:
                        st.metric("‚úÖ Ch·∫•p Thu·∫≠n", approved_count, f"{approved_count/total_count*100:.1f}%")
                    
                    with col3:
                        st.metric("‚ùå T·ª´ Ch·ªëi", rejected_count, f"{rejected_count/total_count*100:.1f}%")
                    
                    with col4:
                        st.metric("‚ö†Ô∏è C√¢n Nh·∫Øc", review_count, f"{review_count/total_count*100:.1f}%")
                    
                    # Detailed results table
                    st.markdown("#### üìã B·∫£ng K·∫øt Qu·∫£ Chi Ti·∫øt")
                    st.dataframe(results_df, use_container_width=True, height=400)
                    
                    # Visualizations
                    st.markdown("---")
                    st.markdown("### üìà Ph√¢n T√≠ch K·∫øt Qu·∫£")
                    create_batch_visualizations(results_df)
                    
                    # Download options
                    st.markdown("---")
                    st.markdown("### üíæ T·∫£i K·∫øt Qu·∫£")
                    
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        # CSV download
                        csv_results = results_df.to_csv(index=False)
                        st.download_button(
                            label="üìÑ T·∫£i K·∫øt Qu·∫£ (CSV)",
                            data=csv_results,
                            file_name=f"loan_predictions_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                            mime="text/csv"
                        )
                    
                    with col2:
                        # Excel download
                        excel_file = create_excel_report(results_df, df)
                        st.download_button(
                            label="üìä T·∫£i B√°o C√°o (Excel)",
                            data=excel_file,
                            file_name=f"loan_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                        )
                    
                    st.success("üéâ Ho√†n th√†nh! B·∫°n c√≥ th·ªÉ t·∫£i k·∫øt qu·∫£ ·ªü c√°c n√∫t ph√≠a tr√™n.")
                
            except Exception as e:
                st.error(f"‚ùå L·ªói khi ƒë·ªçc file: {str(e)}")
                st.info("üí° Vui l√≤ng ki·ªÉm tra l·∫°i ƒë·ªãnh d·∫°ng file CSV v√† th·ª≠ l·∫°i.")